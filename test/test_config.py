import gzip, json
import urllib.request
from pathlib import Path
import pytest
from simoc_abm.agent_model import AgentModel
from simoc_abm.util import load_data_file

config_mapping = {
    '1h': 'simoc-simdata-1-human-preset.json.gz',
    '1hrad': 'simoc-simdata-1-human-radish-preset.json.gz',
    '4h': 'simoc-simdata-4-human-preset.json.gz',
    '4hg': 'simoc-simdata-4-human-garden-preset.json.gz',
    '1hg_sam': 'simoc-simdata-sam-1-human-garden-preset.json.gz',
    'b2_mission1a': 'simoc-simdata-b2-mission-1a.json.gz',
    'b2_mission1b': 'simoc-simdata-b2-mission-1b.json.gz',
    'b2_mission2': 'simoc-simdata-b2-mission-2.json.gz',
}

# ---------------------------------
# Download Simdata from simoc.space
# ---------------------------------

@pytest.fixture(scope="module")
def download_simdata():
    directory = Path.cwd() / 'test' / 'v1_simdata'

    if not directory.exists():
        directory.mkdir(parents=True)

    url = "https://simoc.space/download/simdata/"
    try:
        for simdata_name in config_mapping.values():
            file_path = directory / simdata_name
            if not file_path.exists():
                urllib.request.urlretrieve(url + simdata_name, file_path)
        return True
    except:
        return False

def test_download_simdata(download_simdata):
    assert download_simdata

# -------------------------------------------
# Helper funcs to produce comparision reports
# -------------------------------------------

def load_simdata(stem):
    """Load gzipped simdata file."""
    fname = config_mapping[stem]
    with gzip.open(f'test/v1_simdata/{fname}', 'rb') as f:
        data = json.load(f)
    return data

def lpe(predictions, targets):
    """Lifetime percentage error"""
    _p = abs(sum(predictions))
    _t = abs(sum(targets))
    return 0 if _t == 0 else (_p-_t)/_t * 100

def compare_records(records, stem):
    """Generate a report of the differences between data generated by the
    current model and current active simdata."""

    # Load current simdata
    simdata = load_simdata(stem)
    assert records['step_num'][-1] == simdata['steps'], f'Different step numbers: {records["step_num"][-1]} vs {simdata["steps"]}'
    references = simdata['data']

    # Generate comparison report
    reports = {}
    for agent_id, record in records['agents'].items():
        reference = references[agent_id]
        report = {}
        
        # Compare storage
        if 'storage' in record:
            report['storage'] = {}
            for currency, predictions in record['storage'].items():
                targets = reference['storage'][currency]
                report['storage'][currency] = lpe(predictions, targets)
        
        # Compare flows
        if 'flows' in record:
            report['flows'] = {}
            for direction, flows in record['flows'].items():
                for currency, currency_flows in flows.items():
                    per_connection = []
                    for connection, predictions in currency_flows.items():
                        targets = reference['flows'][direction][currency][connection]
                        per_connection.append(lpe(predictions, targets))
                    mean_mape = sum(per_connection) / len(per_connection)
                    report['flows'][f'{direction}_{currency}'] = mean_mape
        
        # Compare attributes
        if 'attributes' in record:
            report['attributes'] = {}
            for attribute, predictions in record['attributes'].items():
                targets = reference['attributes'][attribute]
                report['attributes'][attribute] = lpe(predictions, targets)

        reports[agent_id] = report
    return reports

# Between commits, some items are expected to change. They are listed here.
EXCEPTIONS = [
    # 24-Aug: It seems there were some changes to the AtomsphereEqualizer after
    # we generated the last simdata file, which has caused these fields be off
    # (by <5%) in the comparison report. We are ignoring these fields for now.
    # After simdata is updated next, this should be removed or replaced.
    ('water_storage', 'treated'),
    ('co2_removal_SAWD', 'in_co2_criteria_in_co2_ratio_buffer'),
    ('co2_makeup_valve', 'in_co2_criteria_out_co2_ratio_buffer'),
    ('co2_reduction_sabatier', 'in_h2_criteria_in_co2_ratio_buffer'),
]

def generate_and_compare(stem):
    """Generate a comparison report for the given config stem."""
    config = load_data_file(f'config_{stem}.json')
    model = AgentModel.from_config(**config)
    model.run()
    records = model.get_records()
    comparison_report = compare_records(records, stem)
    with open(f'test/v1_simdata/comparison_report_{stem}.json', 'w') as f:
        json.dump(comparison_report, f, indent=2)
    for agent, report in comparison_report.items():
      for section, fields in report.items():
          for field, value in fields.items():
              if any(exception[0] == agent and exception[1] == field
                     for exception in EXCEPTIONS):
                  continue
              percent_error = 1
              # Less than 1% error in lifetime
              assert abs(value) < percent_error, f'{agent} {section} {field} error: {value}'
    # Return items for config-specific tests
    return model, records, comparison_report


# -------------------------------------------
# Test for each config
# -------------------------------------------

class TestConfigs:
    def test_config_1h(self):
        stem = '1h'
        model, records, comparison_report = generate_and_compare(stem)
        assert model.elapsed_time.days == 10
        human = model.agents['human']
        assert human.active == 1

    def test_config_1hrad(self):
        stem = '1hrad'
        model, records, comparison_report = generate_and_compare(stem)
        assert model.elapsed_time.days == 30
        human = model.agents['human']
        assert human.active == 1

    def test_config_4h(self):
        stem = '4h'
        model, records, comparison_report = generate_and_compare(stem)
        human = model.agents['human']
        assert human.active == 4

    def test_config_4hg(self):
        stem = '4hg'
        model, records, comparison_report = generate_and_compare(stem)
        human = model.agents['human']
        assert human.active == 4

    def test_config_1hg_sam(self):
        stem = '1hg_sam'
        model, records, comparison_report = generate_and_compare(stem)
        human = model.agents['human']
        assert human.active == 1

    def test_config_b2_mission1a(self):
        stem = 'b2_mission1a'
        model, records, comparison_report = generate_and_compare(stem)
        human = model.agents['human']
        assert human.active == 8

    def test_config_b2_mission1b(self):
        stem = 'b2_mission1b'
        model, records, comparison_report = generate_and_compare(stem)
        human = model.agents['human']
        assert human.active == 8

    def test_config_b2_mission2(self):
        stem = 'b2_mission2'
        model, records, comparison_report = generate_and_compare(stem)
        human = model.agents['human']
        assert human.active == 8